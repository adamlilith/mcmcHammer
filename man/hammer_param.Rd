% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/hammer_param.r
\name{hammer_param}
\alias{hammer_param}
\title{Match variable names to results from an MCMC}
\usage{
hammer_param(param, i = NULL, j = NULL, k = NULL, l = NULL, mcmc = NULL)
}
\arguments{
\item{param}{Name of the variable(s).
\itemize{
\item \code{param = NULL}: All variables in the MCMC object. An object must be supplied to the \code{mcmc} argument.
\item \verb{param =} a character vector and any of \code{i}, \code{j}, \code{k}, and/or \code{l} are not \code{NULL}: Returns a vector of variable names dependent on which indices are not \code{NULL}. You define \code{i}, \code{j}, \code{k}, and/or \code{l} as numeric vectors. For example, \code{hammer_param('beta', i = 1:3)} will return \code{beta1}, \code{beta2}, and \code{beta3}. You can also define any index as \code{TRUE} or \code{FALSE} (they have the same effect), in which case the function will return the names of all variables in the \code{mcmc} object that match the given index.
}}

\item{i, j, k, l}{Indices used to specify variable names:
\itemize{
\item \code{i} refers to indices that occur immediately after the variable's "base" name. For example, if \code{param} is "\code{beta}", and \code{i = 0:2}, then the function will return \code{beta0}, \code{beta1}, and \code{beta2}.
\item \code{j} refers to the \emph{first} index in square brackets. For example, if \code{param} is \code{beta} and \code{j = 1:3}, then the output will be \code{beta[1]}, \code{beta[2]}, and \code{beta[3]}.
\item \code{k} refers to the \emph{second} index in square brackets. If \code{k} is defined (not \code{NULL}), then \code{j} must be defined. For example, if \code{param} is \code{beta}, \code{j = 1:2}, and \code{k = 1:3}, then the output will be like \code{beta[1, 1]}, \code{beta[2, 1]}, \code{beta[1, 2]}, \code{beta[2, 2]}, \code{beta[1, 3]}, and \code{beta[2, 3]}.
\item \code{l} refers to the \emph{third} index in square brackets. If you provide \code{l}, you must also define \code{j} and \code{k}. For example, if \code{param} is \code{beta}, \code{j = 1:2}, \code{k = 4:5}, and \code{l = 9:10}, then the output will be like \code{beta[1, 4, 9]}, \code{beta[2, 4, 9]}, \code{beta[1, 5, 9]}, \code{beta[2, 5, 9]}, \code{beta[1, 4, 10]}, \code{beta[2, 4, 10]}, and so on.
\item You can also define \code{i} when you define \code{j} alone, \code{j} and \code{k}, or \code{j}, \code{k}, and \code{l}. This will return patterns like \code{beta0[1]}, or like \code{beta0[1, 1]}, or like \code{beta0[1, 2, 3]}.
You must specify all of the indices that would appear in square brackets. For example, for the pattern \code{param[j, k, l]}, you need to define \code{j}, \code{k}, and \code{l}. You can't just define \code{k = 1:2}. You need to set \code{j} and \code{l} equal to numeric/integer vectors and/or logical values.
}}

\item{mcmc}{An object of class \code{mcmc} or \code{mcmc.list}, \emph{or} a \code{list}. If a \code{list}, the function searches down the first element to see if it can find an \code{mcmc} or \code{mcmc.list} object, then uses this if it can.}
}
\value{
Character vector of variables.
}
\description{
This function automates finding of indexed variable in an MCMC object. These include, for example, variables like \code{beta1}, \code{beta2}, \code{beta3}, etc. or variables like \code{beta[1]}, \code{beta[2]}, \code{beta[1]}, etc.
}
\examples{

# Just making variable names:
param <- 'gamma'
hammer_param(param, i = 0:1)
hammer_param(param, j = 1:2)
hammer_param(param, i = 0:1, j = 1:2)
hammer_param(param, j = 1:2, k = 1:3)
hammer_param(param, i = 0:1, j = 1:2, k = 1:2)
hammer_param(param, j = 1:2, k = 1:2, l = 1:2)
hammer_param(param, i = 0:1, j = 1:2, k = 1:2, l = 1:2)

# Getting variable names that are also in the MCMC object:
data(mcmc)
param <- 'beta'
hammer_param(param = NULL, mcmc = mcmc) # all variables
hammer_param(param, j = 3:4, mcmc = mcmc)

# Fuzzy finding of indexed variables:
hammer_param('beta', i = TRUE, mcmc = mcmc) # none with names beta0, etc.
hammer_param('beta', j = TRUE, mcmc = mcmc)
hammer_param('z_hat', j = TRUE, k = 1:2, mcmc = mcmc)
hammer_param('z_hat', j = TRUE, k = TRUE, mcmc = mcmc)

}
